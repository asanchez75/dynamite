From 390249bd5fb2b0e5fe1331bde87a2918da8b0eb6 Mon Sep 17 00:00:00 2001
From: Alexandra Vintila <andavintila@gmail.com>
Date: Tue, 4 Feb 2014 10:54:58 +0100
Subject: [PATCH] TBitSet related changes

---
 src/nl/vu/cs/ajira/data/types/DataProvider.java |    4 +
 src/nl/vu/cs/ajira/data/types/TBitSet.java      |  111 +++++++++++++++++++++++
 src/nl/vu/cs/ajira/utils/Consts.java            |    1 +
 3 files changed, 116 insertions(+), 0 deletions(-)
 create mode 100644 src/nl/vu/cs/ajira/data/types/TBitSet.java

diff --git a/src/nl/vu/cs/ajira/data/types/DataProvider.java b/src/nl/vu/cs/ajira/data/types/DataProvider.java
index a789ef8..5350e88 100644
--- a/src/nl/vu/cs/ajira/data/types/DataProvider.java
+++ b/src/nl/vu/cs/ajira/data/types/DataProvider.java
@@ -53,6 +53,8 @@ public class DataProvider {
 		list[Consts.DATATYPE_TDOUBLE] = new Factory<SimpleData>(TDouble.class);
 		list[Consts.DATATYPE_TDOUBLEARRAY] = new Factory<SimpleData>(
 				TDoubleArray.class);
+		list[Consts.DATATYPE_TBITSET] = new Factory<SimpleData>(
+				TBitSet.class);
 
 		retrieveIds.put(TLong.class.getName(), Consts.DATATYPE_TLONG);
 		retrieveIds.put(TInt.class.getName(), Consts.DATATYPE_TINT);
@@ -70,6 +72,8 @@ public class DataProvider {
 		retrieveIds.put(TDouble.class.getName(), Consts.DATATYPE_TDOUBLE);
 		retrieveIds.put(TDoubleArray.class.getName(),
 				Consts.DATATYPE_TDOUBLEARRAY);
+		retrieveIds.put(TBitSet.class.getName(),
+				Consts.DATATYPE_TBITSET);
 
 		for (Map.Entry<Integer, Class<? extends SimpleData>> entry : registeredTypes
 				.entrySet()) {
diff --git a/src/nl/vu/cs/ajira/data/types/TBitSet.java b/src/nl/vu/cs/ajira/data/types/TBitSet.java
new file mode 100644
index 0000000..60f160d
--- /dev/null
+++ b/src/nl/vu/cs/ajira/data/types/TBitSet.java
@@ -0,0 +1,111 @@
+package nl.vu.cs.ajira.data.types;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.BitSet;
+
+import nl.vu.cs.ajira.data.types.SimpleData;
+import nl.vu.cs.ajira.utils.Consts;
+
+public class TBitSet extends SimpleData {
+
+	BitSet bitSet;
+	
+	public TBitSet() {
+	}
+	
+	public TBitSet(BitSet bitSet) {
+		this.bitSet = bitSet;
+	}
+	
+	public BitSet getBitSet() {
+		return bitSet;
+	}
+	
+	public void setBitSet(BitSet bitSet) {
+		this.bitSet = bitSet;
+	}
+	
+	@Override
+	public void readFrom(DataInput input) throws IOException {
+		int size = input.readInt();
+		if (size != -1) {
+			if (bitSet == null || bitSet.size() != size) {
+				bitSet = new BitSet(size);
+				bitSet.clear();
+			}
+			byte[] bytes = new byte[size];
+			input.readFully(bytes);
+			for (int i = 0; i < size; i++) {
+				if (bytes[i] == (byte) 1) {
+					bitSet.set(i);
+				}
+			}
+		} else {
+			bitSet = null;
+		}
+	}
+
+	@Override
+	public void writeTo(DataOutput output) throws IOException {
+		if (bitSet == null) {
+			output.writeInt(-1);
+		} else {
+			int size = bitSet.size();
+			output.writeInt(size);
+			byte[] bytes = new byte[size];
+			for (int i = 0; i < size; i++) {
+				if (bitSet.get(i)) {
+					bytes[i] = (byte) 1;
+				} else {
+					bytes[i] = (byte) 0;
+				}
+			}
+			output.write(bytes);
+		}
+	}
+
+	@Override
+	/**
+	 * Compares two BitSet objects.
+	 * Returns 0 in case of equality, 
+	 * Returns a number lower than 0 in case the current BitSet is lower than the parameter's BitSet, 
+	 * Returns a number greater than 0 in case the current BitSet is greater than the parameter's BitSet
+	 */
+	public int compareTo(SimpleData object) {
+		TBitSet arg = (TBitSet) object;
+		if (arg.bitSet != bitSet) {
+			for (int i = 0; i < bitSet.size(); i++) {
+				if (arg.bitSet.get(i) != bitSet.get(i)) {
+					if (bitSet.get(i)) {
+						return 1;
+					} else {
+						return -1;
+					}
+				}
+			}
+		} 
+		return 0;
+	}
+
+	@Override
+	public void copyTo(SimpleData el) {
+		if (bitSet != null) {
+			((TBitSet) el).bitSet = (BitSet) bitSet.clone();
+		} else {
+			((TBitSet) el).bitSet = null;
+		}
+	}
+
+	@Override
+	public boolean equals(SimpleData el) {
+		return compareTo(el) == 0;
+	}
+
+	@Override
+	public int getIdDatatype() {
+		return Consts.DATATYPE_TBITSET;
+	}
+
+}
diff --git a/src/nl/vu/cs/ajira/utils/Consts.java b/src/nl/vu/cs/ajira/utils/Consts.java
index 70c5ec7..dab16c1 100644
--- a/src/nl/vu/cs/ajira/utils/Consts.java
+++ b/src/nl/vu/cs/ajira/utils/Consts.java
@@ -45,6 +45,7 @@ public class Consts {
 	public static final int DATATYPE_TBOOLEANARRAY = 10;
 	public static final int DATATYPE_TDOUBLEARRAY = 11;
 	public static final int DATATYPE_TDOUBLE = 12;
+	public static final int DATATYPE_TBITSET = 13;
 
 	public static final String STATE_OPEN = "ACTIVE";
 	public static final String STATE_FINISHED = "FINISHED";
-- 
1.7.4.4

